{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/post": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all posts for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get all posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with list of posts",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.GetAllPostRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Unable to retrieve posts",
                        "schema": {
                            "$ref": "#/definitions/postHandler.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing post with the given title and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Update a post",
                "parameters": [
                    {
                        "description": "Update Post Request",
                        "name": "UpdatePostReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.UpdatePostReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with error always false",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.UpdatePostRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or post not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new post with the given title and content",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Create Post Request",
                        "name": "CreatePostReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.CreatePostReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with error always false",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.CreatePostRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/post/getSorted": {
            "get": {
                "description": "Retrieve posts sorted by score or creation date within a time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get sorted posts",
                "parameters": [
                    {
                        "enum": [
                            "score",
                            "created_at"
                        ],
                        "type": "string",
                        "description": "Sort by (default: score)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "day",
                            "week",
                            "month"
                        ],
                        "type": "string",
                        "description": "Time range (default: month)",
                        "name": "range",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with sorted list of posts",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.GetSortedPostRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Unable to retrieve posts",
                        "schema": {
                            "$ref": "#/definitions/postHandler.Response"
                        }
                    }
                }
            }
        },
        "/post/vote": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cast a vote (e.g., upvote or downvote) on a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Vote on a post",
                "parameters": [
                    {
                        "description": "Vote Post Request",
                        "name": "VotePostReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.VotePostReq"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with error always false",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid vote or post not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/post/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a specific post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get a post by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with post details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.GetByIdRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid ID or post not found",
                        "schema": {
                            "$ref": "#/definitions/postHandler.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for authentication",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with error always false",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid ID or post not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Token missing or invalid",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/postHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        },
                                        "error": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/auth/login": {
            "post": {
                "description": "Authenticate a user with their credentials and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login Request with user credentials",
                        "name": "LoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with authentication token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or credentials",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/auth/register": {
            "post": {
                "description": "Register a new user with the provided credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Register Request with user details",
                        "name": "RegisterRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with registered user details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.RegisterResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or registration failed",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/auth/token/tokenRenew": {
            "post": {
                "description": "Renew an existing authentication token using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh authentication token",
                "parameters": [
                    {
                        "description": "Token Renew Request with refresh token",
                        "name": "TokenRenewReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/params.TokenRenewReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with new authentication token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/params.TokenRenewRes"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or refresh token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/userHandler.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Post": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "params.CreatePostReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "params.CreatePostRes": {
            "type": "object",
            "properties": {
                "post": {
                    "$ref": "#/definitions/entity.Post"
                }
            }
        },
        "params.GetAllPostRes": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Post"
                    }
                }
            }
        },
        "params.GetByIdRes": {
            "type": "object",
            "properties": {
                "post": {
                    "$ref": "#/definitions/entity.Post"
                }
            }
        },
        "params.GetSortedPostRes": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Post"
                    }
                }
            }
        },
        "params.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "params.LoginResponse": {
            "type": "object",
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/params.Tokens"
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                }
            }
        },
        "params.RegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "params.RegisterResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/entity.User"
                }
            }
        },
        "params.TokenRenewReq": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "params.TokenRenewRes": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "params.Tokens": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "params.UpdatePostReq": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "params.UpdatePostRes": {
            "type": "object",
            "properties": {
                "post": {
                    "$ref": "#/definitions/entity.Post"
                }
            }
        },
        "params.VotePostReq": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "vote": {
                    "type": "integer"
                }
            }
        },
        "postHandler.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "userHandler.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}